AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An serverless application that tests the AWS SSB and generates a HTML report

Parameters:
  Email:
    Type: "String"
    Description: "이메일을 입력하시고 메일을 통하여 알림을 구독할 경우 리포트 생성 알림을 받을 수 있습니다."
  APIExpireDate:
    Description : "API Endpoint의 접속이 만료되는 날짜를 설정해주세요. 만료 후에는 API Endpoint를 통한 접속이 불가합니다."
    Type : "String"
    Default : "2022-08-30T12:00:00+09:00"
    AllowedPattern : "^\\d{4}(-\\d{2}){2}[T](\\d{2}:){2}\\d{2}\\+09:00$"
  PreSignedURL:
    Description : "리포트를 다운로드할 수 있도록 생성되는 pre-signed URL의 유효시간을 시간 단위로 설정해주세요. (1시간 ~ 168시간) 만료 후에는 URL을 통한 다운로드가 불가합니다."
    Type : "Number"
    Default : 24
    MinValue: 1
    MaxValue: 168

Resources:
  SSBBucket:
    Type: AWS::S3::Bucket
    Metadata:
      SamResourceId: SSBBucket
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3andLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sts:GetCallerIdentity'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                  - 'lambda:InvokeFunction'
                  - 'sns:Publish'
                  - 'sns:ListSubscriptionsByTopic'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  SSBExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: SSBCheckPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sts:GetCallerIdentity'
                  - 'ec2:DescribeRegions'
                  - 'account:GetAlternateContact'
                  - 'iam:GenerateCredentialReport'
                  - 'iam:GetCredentialReport'
                  - 'iam:GetAccountPasswordPolicy'
                  - 'iam:ListUsers'
                  - 'iam:ListAttachedUserPolicies'
                  - 'iam:ListUserPolicies'
                  - 'cloudtrail:DescribeTrails'
                  - 'cloudtrail:GetTrailStatus'
                  - 's3:GetAccountPublicAccessBlock'
                  - 's3:GetBucketPublicAccessBlock'
                  - 's3:ListBucket'
                  - 's3:ListAllMyBuckets'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 'cloudwatch:DescribeAlarms'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeSubnets'
                  - 'support:DescribeTrustedAdvisorChecks'
                  - 'guardduty:ListDetectors'
                  - 'guardduty:GetDetector'
                  - 'sns:Publish'
                  - 'lambda:InvokeFunction'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: 'email'

##########################################################################
#  Lambda functions                                                      #
##########################################################################
  EntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: lambda/entry/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 10
      Environment: 
        Variables:
          Bucket: !GetAtt SSBBucket.Arn
          Topic: !Ref SnsTopic
      Architectures:
        - x86_64
  CheckAFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Role:
        Fn::GetAtt:
        - SSBExecutionRole
        - Arn
      CodeUri: lambda/ssb/checkA/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 600
      MemorySize: 256
      Environment:
        Variables:
          Bucket: !GetAtt SSBBucket.Arn
      Architectures:
      - x86_64
    Metadata:
      SamResourceId: CheckAFunction
  CheckBFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Role:
        Fn::GetAtt:
        - SSBExecutionRole
        - Arn
      CodeUri: lambda/ssb/checkB/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 600
      MemorySize: 256
      Environment:
        Variables:
          Bucket: !GetAtt SSBBucket.Arn
      Architectures:
      - x86_64
    Metadata:
      SamResourceId: CheckBFunction
  CheckCFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Role:
        Fn::GetAtt:
        - SSBExecutionRole
        - Arn
      CodeUri: lambda/ssb/checkC/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 600
      MemorySize: 256
      Environment:
        Variables:
          Bucket: !GetAtt SSBBucket.Arn
      Architectures:
      - x86_64
    Metadata:
      SamResourceId: CheckCFunction
  CheckDFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Role:
        Fn::GetAtt:
        - SSBExecutionRole
        - Arn
      CodeUri: lambda/ssb/checkD/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 600
      MemorySize: 256
      Environment:
        Variables:
          Bucket: !GetAtt SSBBucket.Arn
      Architectures:
      - x86_64
    Metadata:
      SamResourceId: CheckDFunction
  ApiGatewayEndpoint:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      Auth:
        ResourcePolicy:
          CustomStatements: {
              Effect: "Allow",
              Principal: "*",
              Action: "execute-api:Invoke",
              Resource: ['execute-api:/*/*/*'],
              Condition: {
                DateLessThan: {
                  "aws:CurrentTime": !Ref APIExpireDate
                }
              }
          }

  ReportFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: lambda/report/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 10
      Environment:
        Variables:
          Bucket: !GetAtt SSBBucket.Arn
          Topic: !Ref SnsTopic
          Presigned: !Ref PreSignedURL
      Architectures:
      - x86_64
      Events:
        Report:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayEndpoint
            Path: /
            Method: get
    Metadata:
      SamResourceId: ReportFunction

##########################################################################
#   STEP FUNCTION                                                        #
##########################################################################
  SSBStateMachine:
    Type: 'AWS::Serverless::StateMachine'
    Properties:
      DefinitionUri: statemachine/statemachine.asl.json
      DefinitionSubstitutions:
        entryFunction: !Ref EntryFunction
        checkAFunction: !Ref CheckAFunction
        checkBFunction: !Ref CheckBFunction
        checkCFunction: !Ref CheckCFunction
        checkDFunction: !Ref CheckDFunction
        reportFunction: !Ref ReportFunction
      Policies:
        - LambdaInvokePolicy: 
            FunctionName: !Ref EntryFunction
        - LambdaInvokePolicy: 
            FunctionName: !Ref CheckAFunction
        - LambdaInvokePolicy: 
            FunctionName: !Ref CheckBFunction
        - LambdaInvokePolicy: 
            FunctionName: !Ref CheckCFunction
        - LambdaInvokePolicy: 
            FunctionName: !Ref CheckDFunction
        - LambdaInvokePolicy: 
            FunctionName: !Ref ReportFunction